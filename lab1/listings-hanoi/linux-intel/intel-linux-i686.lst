
i3686.o:     file format elf32-i386


Disassembly of section .init:

00001000 <_init>:
    1000:	53                   	push   ebx
    1001:	83 ec 08             	sub    esp,0x8
    1004:	e8 a7 00 00 00       	call   10b0 <__x86.get_pc_thunk.bx>
    1009:	81 c3 f7 2f 00 00    	add    ebx,0x2ff7
    100f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
    1015:	85 c0                	test   eax,eax
    1017:	74 02                	je     101b <_init+0x1b>
    1019:	ff d0                	call   eax
    101b:	e8 c0 01 00 00       	call   11e0 <frame_dummy>
    1020:	e8 2b 03 00 00       	call   1350 <__do_global_ctors_aux>
    1025:	83 c4 08             	add    esp,0x8
    1028:	5b                   	pop    ebx
    1029:	c3                   	ret    

Disassembly of section .plt:

00001030 <.plt>:
    1030:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
    1036:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
    103c:	00 00                	add    BYTE PTR [eax],al
	...

00001040 <printf@plt>:
    1040:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
    1046:	68 00 00 00 00       	push   0x0
    104b:	e9 e0 ff ff ff       	jmp    1030 <.plt>

00001050 <__libc_start_main@plt>:
    1050:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
    1056:	68 08 00 00 00       	push   0x8
    105b:	e9 d0 ff ff ff       	jmp    1030 <.plt>

Disassembly of section .plt.got:

00001060 <__cxa_finalize@plt>:
    1060:	ff a3 f0 ff ff ff    	jmp    DWORD PTR [ebx-0x10]
    1066:	66 90                	xchg   ax,ax

Disassembly of section .text:

00001070 <_start>:
    1070:	31 ed                	xor    ebp,ebp
    1072:	5e                   	pop    esi
    1073:	89 e1                	mov    ecx,esp
    1075:	83 e4 f0             	and    esp,0xfffffff0
    1078:	50                   	push   eax
    1079:	54                   	push   esp
    107a:	52                   	push   edx
    107b:	e8 22 00 00 00       	call   10a2 <_start+0x32>
    1080:	81 c3 80 2f 00 00    	add    ebx,0x2f80
    1086:	8d 83 40 d3 ff ff    	lea    eax,[ebx-0x2cc0]
    108c:	50                   	push   eax
    108d:	8d 83 e0 d2 ff ff    	lea    eax,[ebx-0x2d20]
    1093:	50                   	push   eax
    1094:	51                   	push   ecx
    1095:	56                   	push   esi
    1096:	ff b3 f8 ff ff ff    	push   DWORD PTR [ebx-0x8]
    109c:	e8 af ff ff ff       	call   1050 <__libc_start_main@plt>
    10a1:	f4                   	hlt    
    10a2:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
    10a5:	c3                   	ret    
    10a6:	66 90                	xchg   ax,ax
    10a8:	66 90                	xchg   ax,ax
    10aa:	66 90                	xchg   ax,ax
    10ac:	66 90                	xchg   ax,ax
    10ae:	66 90                	xchg   ax,ax

000010b0 <__x86.get_pc_thunk.bx>:
    10b0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
    10b3:	c3                   	ret    
    10b4:	66 90                	xchg   ax,ax
    10b6:	66 90                	xchg   ax,ax
    10b8:	66 90                	xchg   ax,ax
    10ba:	66 90                	xchg   ax,ax
    10bc:	66 90                	xchg   ax,ax
    10be:	66 90                	xchg   ax,ax

000010c0 <deregister_tm_clones>:
    10c0:	e8 20 01 00 00       	call   11e5 <__x86.get_pc_thunk.dx>
    10c5:	81 c2 3b 2f 00 00    	add    edx,0x2f3b
    10cb:	8d 8a 1c 00 00 00    	lea    ecx,[edx+0x1c]
    10d1:	8d 82 1c 00 00 00    	lea    eax,[edx+0x1c]
    10d7:	39 c8                	cmp    eax,ecx
    10d9:	74 1d                	je     10f8 <deregister_tm_clones+0x38>
    10db:	8b 82 ec ff ff ff    	mov    eax,DWORD PTR [edx-0x14]
    10e1:	85 c0                	test   eax,eax
    10e3:	74 13                	je     10f8 <deregister_tm_clones+0x38>
    10e5:	55                   	push   ebp
    10e6:	89 e5                	mov    ebp,esp
    10e8:	83 ec 14             	sub    esp,0x14
    10eb:	51                   	push   ecx
    10ec:	ff d0                	call   eax
    10ee:	83 c4 10             	add    esp,0x10
    10f1:	c9                   	leave  
    10f2:	c3                   	ret    
    10f3:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
    10f7:	90                   	nop
    10f8:	c3                   	ret    
    10f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

00001100 <register_tm_clones>:
    1100:	e8 e0 00 00 00       	call   11e5 <__x86.get_pc_thunk.dx>
    1105:	81 c2 fb 2e 00 00    	add    edx,0x2efb
    110b:	55                   	push   ebp
    110c:	89 e5                	mov    ebp,esp
    110e:	53                   	push   ebx
    110f:	8d 8a 1c 00 00 00    	lea    ecx,[edx+0x1c]
    1115:	8d 82 1c 00 00 00    	lea    eax,[edx+0x1c]
    111b:	83 ec 04             	sub    esp,0x4
    111e:	29 c8                	sub    eax,ecx
    1120:	89 c3                	mov    ebx,eax
    1122:	c1 e8 1f             	shr    eax,0x1f
    1125:	c1 fb 02             	sar    ebx,0x2
    1128:	01 d8                	add    eax,ebx
    112a:	d1 f8                	sar    eax,1
    112c:	74 14                	je     1142 <register_tm_clones+0x42>
    112e:	8b 92 fc ff ff ff    	mov    edx,DWORD PTR [edx-0x4]
    1134:	85 d2                	test   edx,edx
    1136:	74 0a                	je     1142 <register_tm_clones+0x42>
    1138:	83 ec 08             	sub    esp,0x8
    113b:	50                   	push   eax
    113c:	51                   	push   ecx
    113d:	ff d2                	call   edx
    113f:	83 c4 10             	add    esp,0x10
    1142:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
    1145:	c9                   	leave  
    1146:	c3                   	ret    
    1147:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
    114e:	66 90                	xchg   ax,ax

00001150 <__do_global_dtors_aux>:
    1150:	55                   	push   ebp
    1151:	89 e5                	mov    ebp,esp
    1153:	57                   	push   edi
    1154:	e8 90 00 00 00       	call   11e9 <__x86.get_pc_thunk.di>
    1159:	81 c7 a7 2e 00 00    	add    edi,0x2ea7
    115f:	56                   	push   esi
    1160:	53                   	push   ebx
    1161:	83 ec 0c             	sub    esp,0xc
    1164:	80 bf 1c 00 00 00 00 	cmp    BYTE PTR [edi+0x1c],0x0
    116b:	75 65                	jne    11d2 <__do_global_dtors_aux+0x82>
    116d:	8b 87 f0 ff ff ff    	mov    eax,DWORD PTR [edi-0x10]
    1173:	85 c0                	test   eax,eax
    1175:	74 13                	je     118a <__do_global_dtors_aux+0x3a>
    1177:	83 ec 0c             	sub    esp,0xc
    117a:	ff b7 18 00 00 00    	push   DWORD PTR [edi+0x18]
    1180:	89 fb                	mov    ebx,edi
    1182:	e8 d9 fe ff ff       	call   1060 <__cxa_finalize@plt>
    1187:	83 c4 10             	add    esp,0x10
    118a:	8d b7 14 ff ff ff    	lea    esi,[edi-0xec]
    1190:	8d 9f 18 ff ff ff    	lea    ebx,[edi-0xe8]
    1196:	8b 87 20 00 00 00    	mov    eax,DWORD PTR [edi+0x20]
    119c:	29 f3                	sub    ebx,esi
    119e:	c1 fb 02             	sar    ebx,0x2
    11a1:	83 eb 01             	sub    ebx,0x1
    11a4:	39 d8                	cmp    eax,ebx
    11a6:	73 1e                	jae    11c6 <__do_global_dtors_aux+0x76>
    11a8:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
    11af:	90                   	nop
    11b0:	83 c0 01             	add    eax,0x1
    11b3:	89 87 20 00 00 00    	mov    DWORD PTR [edi+0x20],eax
    11b9:	ff 14 86             	call   DWORD PTR [esi+eax*4]
    11bc:	8b 87 20 00 00 00    	mov    eax,DWORD PTR [edi+0x20]
    11c2:	39 d8                	cmp    eax,ebx
    11c4:	72 ea                	jb     11b0 <__do_global_dtors_aux+0x60>
    11c6:	e8 f5 fe ff ff       	call   10c0 <deregister_tm_clones>
    11cb:	c6 87 1c 00 00 00 01 	mov    BYTE PTR [edi+0x1c],0x1
    11d2:	8d 65 f4             	lea    esp,[ebp-0xc]
    11d5:	5b                   	pop    ebx
    11d6:	5e                   	pop    esi
    11d7:	5f                   	pop    edi
    11d8:	5d                   	pop    ebp
    11d9:	c3                   	ret    
    11da:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

000011e0 <frame_dummy>:
    11e0:	e9 1b ff ff ff       	jmp    1100 <register_tm_clones>

000011e5 <__x86.get_pc_thunk.dx>:
    11e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
    11e8:	c3                   	ret    

000011e9 <__x86.get_pc_thunk.di>:
    11e9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
    11ec:	c3                   	ret    

000011ed <hanoi>:
#include <stdio.h>
void hanoi(int n, char from, char to, char aux)
{
    11ed:	55                   	push   ebp
    11ee:	89 e5                	mov    ebp,esp
    11f0:	56                   	push   esi
    11f1:	53                   	push   ebx
    11f2:	83 ec 10             	sub    esp,0x10
    11f5:	e8 b6 fe ff ff       	call   10b0 <__x86.get_pc_thunk.bx>
    11fa:	81 c3 06 2e 00 00    	add    ebx,0x2e06
    1200:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
    1203:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
    1206:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
    1209:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
    120c:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
    120f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
    if (n == 1)
    1212:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
    1216:	75 1e                	jne    1236 <hanoi+0x49>
        printf("Move disk 1 from %c to %c\n", from, to);
    1218:	0f be 55 f0          	movsx  edx,BYTE PTR [ebp-0x10]
    121c:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
    1220:	83 ec 04             	sub    esp,0x4
    1223:	52                   	push   edx
    1224:	50                   	push   eax
    1225:	8d 83 08 e0 ff ff    	lea    eax,[ebx-0x1ff8]
    122b:	50                   	push   eax
    122c:	e8 0f fe ff ff       	call   1040 <printf@plt>
    1231:	83 c4 10             	add    esp,0x10
    {
        hanoi(n - 1, from, aux, to);
        printf("Move disk %d from %c to %c\n", n, from, to);
        hanoi(n - 1, aux, to, from);
    }
}
    1234:	eb 58                	jmp    128e <hanoi+0xa1>
        hanoi(n - 1, from, aux, to);
    1236:	0f be 4d f0          	movsx  ecx,BYTE PTR [ebp-0x10]
    123a:	0f be 55 ec          	movsx  edx,BYTE PTR [ebp-0x14]
    123e:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
    1242:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
    1245:	83 ee 01             	sub    esi,0x1
    1248:	51                   	push   ecx
    1249:	52                   	push   edx
    124a:	50                   	push   eax
    124b:	56                   	push   esi
    124c:	e8 9c ff ff ff       	call   11ed <hanoi>
    1251:	83 c4 10             	add    esp,0x10
        printf("Move disk %d from %c to %c\n", n, from, to);
    1254:	0f be 55 f0          	movsx  edx,BYTE PTR [ebp-0x10]
    1258:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
    125c:	52                   	push   edx
    125d:	50                   	push   eax
    125e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
    1261:	8d 83 23 e0 ff ff    	lea    eax,[ebx-0x1fdd]
    1267:	50                   	push   eax
    1268:	e8 d3 fd ff ff       	call   1040 <printf@plt>
    126d:	83 c4 10             	add    esp,0x10
        hanoi(n - 1, aux, to, from);
    1270:	0f be 4d f4          	movsx  ecx,BYTE PTR [ebp-0xc]
    1274:	0f be 55 f0          	movsx  edx,BYTE PTR [ebp-0x10]
    1278:	0f be 45 ec          	movsx  eax,BYTE PTR [ebp-0x14]
    127c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
    127f:	83 eb 01             	sub    ebx,0x1
    1282:	51                   	push   ecx
    1283:	52                   	push   edx
    1284:	50                   	push   eax
    1285:	53                   	push   ebx
    1286:	e8 62 ff ff ff       	call   11ed <hanoi>
    128b:	83 c4 10             	add    esp,0x10
}
    128e:	90                   	nop
    128f:	8d 65 f8             	lea    esp,[ebp-0x8]
    1292:	5b                   	pop    ebx
    1293:	5e                   	pop    esi
    1294:	5d                   	pop    ebp
    1295:	c3                   	ret    

00001296 <main>:
int main()
{
    1296:	8d 4c 24 04          	lea    ecx,[esp+0x4]
    129a:	83 e4 f0             	and    esp,0xfffffff0
    129d:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
    12a0:	55                   	push   ebp
    12a1:	89 e5                	mov    ebp,esp
    12a3:	51                   	push   ecx
    12a4:	83 ec 04             	sub    esp,0x4
    12a7:	e8 22 00 00 00       	call   12ce <__x86.get_pc_thunk.ax>
    12ac:	05 54 2d 00 00       	add    eax,0x2d54
    hanoi(3, 'A', 'C', 'B');
    12b1:	6a 42                	push   0x42
    12b3:	6a 43                	push   0x43
    12b5:	6a 41                	push   0x41
    12b7:	6a 03                	push   0x3
    12b9:	e8 2f ff ff ff       	call   11ed <hanoi>
    12be:	83 c4 10             	add    esp,0x10
    12c1:	b8 00 00 00 00       	mov    eax,0x0
}
    12c6:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
    12c9:	c9                   	leave  
    12ca:	8d 61 fc             	lea    esp,[ecx-0x4]
    12cd:	c3                   	ret    

000012ce <__x86.get_pc_thunk.ax>:
    12ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
    12d1:	c3                   	ret    
    12d2:	66 90                	xchg   ax,ax
    12d4:	66 90                	xchg   ax,ax
    12d6:	66 90                	xchg   ax,ax
    12d8:	66 90                	xchg   ax,ax
    12da:	66 90                	xchg   ax,ax
    12dc:	66 90                	xchg   ax,ax
    12de:	66 90                	xchg   ax,ax

000012e0 <__libc_csu_init>:
    12e0:	55                   	push   ebp
    12e1:	e8 5b 00 00 00       	call   1341 <__x86.get_pc_thunk.bp>
    12e6:	81 c5 1a 2d 00 00    	add    ebp,0x2d1a
    12ec:	57                   	push   edi
    12ed:	56                   	push   esi
    12ee:	53                   	push   ebx
    12ef:	83 ec 0c             	sub    esp,0xc
    12f2:	89 eb                	mov    ebx,ebp
    12f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
    12f8:	e8 03 fd ff ff       	call   1000 <_init>
    12fd:	8d 9d 0c ff ff ff    	lea    ebx,[ebp-0xf4]
    1303:	8d 85 0c ff ff ff    	lea    eax,[ebp-0xf4]
    1309:	29 c3                	sub    ebx,eax
    130b:	c1 fb 02             	sar    ebx,0x2
    130e:	74 25                	je     1335 <__libc_csu_init+0x55>
    1310:	31 f6                	xor    esi,esi
    1312:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
    1318:	83 ec 04             	sub    esp,0x4
    131b:	57                   	push   edi
    131c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
    1320:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
    1324:	ff 94 b5 0c ff ff ff 	call   DWORD PTR [ebp+esi*4-0xf4]
    132b:	83 c6 01             	add    esi,0x1
    132e:	83 c4 10             	add    esp,0x10
    1331:	39 f3                	cmp    ebx,esi
    1333:	75 e3                	jne    1318 <__libc_csu_init+0x38>
    1335:	83 c4 0c             	add    esp,0xc
    1338:	5b                   	pop    ebx
    1339:	5e                   	pop    esi
    133a:	5f                   	pop    edi
    133b:	5d                   	pop    ebp
    133c:	c3                   	ret    
    133d:	8d 76 00             	lea    esi,[esi+0x0]

00001340 <__libc_csu_fini>:
    1340:	c3                   	ret    

00001341 <__x86.get_pc_thunk.bp>:
    1341:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
    1344:	c3                   	ret    
    1345:	66 90                	xchg   ax,ax
    1347:	66 90                	xchg   ax,ax
    1349:	66 90                	xchg   ax,ax
    134b:	66 90                	xchg   ax,ax
    134d:	66 90                	xchg   ax,ax
    134f:	90                   	nop

00001350 <__do_global_ctors_aux>:
    1350:	e8 90 fe ff ff       	call   11e5 <__x86.get_pc_thunk.dx>
    1355:	81 c2 ab 2c 00 00    	add    edx,0x2cab
    135b:	8b 82 0c ff ff ff    	mov    eax,DWORD PTR [edx-0xf4]
    1361:	83 f8 ff             	cmp    eax,0xffffffff
    1364:	74 2a                	je     1390 <__do_global_ctors_aux+0x40>
    1366:	55                   	push   ebp
    1367:	89 e5                	mov    ebp,esp
    1369:	53                   	push   ebx
    136a:	8d 9a 0c ff ff ff    	lea    ebx,[edx-0xf4]
    1370:	83 ec 04             	sub    esp,0x4
    1373:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
    1377:	90                   	nop
    1378:	ff d0                	call   eax
    137a:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
    137d:	83 eb 04             	sub    ebx,0x4
    1380:	83 f8 ff             	cmp    eax,0xffffffff
    1383:	75 f3                	jne    1378 <__do_global_ctors_aux+0x28>
    1385:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
    1388:	c9                   	leave  
    1389:	c3                   	ret    
    138a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
    1390:	c3                   	ret    

Disassembly of section .fini:

00001394 <_fini>:
    1394:	53                   	push   ebx
    1395:	83 ec 08             	sub    esp,0x8
    1398:	e8 13 fd ff ff       	call   10b0 <__x86.get_pc_thunk.bx>
    139d:	81 c3 63 2c 00 00    	add    ebx,0x2c63
    13a3:	e8 a8 fd ff ff       	call   1150 <__do_global_dtors_aux>
    13a8:	83 c4 08             	add    esp,0x8
    13ab:	5b                   	pop    ebx
    13ac:	c3                   	ret    
