; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Work\lab1\hanoi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_hanoi
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG9188	DB	'Move disk 1 from %c to %c', 0aH, 00H
	ORG $+1
$SG9189	DB	'Move disk %d from %c to %c', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File C:\Work\lab1\hanoi.c
_TEXT	SEGMENT
_main	PROC

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 15   :     hanoi(3, 'A', 'C', 'B');

  00003	6a 42		 push	 66			; 00000042H
  00005	6a 43		 push	 67			; 00000043H
  00007	6a 41		 push	 65			; 00000041H
  00009	6a 03		 push	 3
  0000b	e8 00 00 00 00	 call	 _hanoi
  00010	83 c4 10	 add	 esp, 16			; 00000010H

; 16   : }

  00013	33 c0		 xor	 eax, eax
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Work\lab1\hanoi.c
_TEXT	SEGMENT
_n$ = 8							; size = 4
_from$ = 12						; size = 1
_to$ = 16						; size = 1
_aux$ = 20						; size = 1
_hanoi	PROC

; 3    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4    :     if (n == 1)

  00003	83 7d 08 01	 cmp	 DWORD PTR _n$[ebp], 1
  00007	75 19		 jne	 SHORT $LN2@hanoi

; 5    :         printf("Move disk 1 from %c to %c\n", from, to);

  00009	0f be 45 10	 movsx	 eax, BYTE PTR _to$[ebp]
  0000d	50		 push	 eax
  0000e	0f be 4d 0c	 movsx	 ecx, BYTE PTR _from$[ebp]
  00012	51		 push	 ecx
  00013	68 00 00 00 00	 push	 OFFSET $SG9188
  00018	e8 00 00 00 00	 call	 _printf
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	eb 57		 jmp	 SHORT $LN1@hanoi
$LN2@hanoi:

; 6    :     else
; 7    :     {
; 8    :         hanoi(n - 1, from, aux, to);

  00022	0f b6 55 10	 movzx	 edx, BYTE PTR _to$[ebp]
  00026	52		 push	 edx
  00027	0f b6 45 14	 movzx	 eax, BYTE PTR _aux$[ebp]
  0002b	50		 push	 eax
  0002c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _from$[ebp]
  00030	51		 push	 ecx
  00031	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  00034	83 ea 01	 sub	 edx, 1
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _hanoi
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 9    :         printf("Move disk %d from %c to %c\n", n, from, to);

  00040	0f be 45 10	 movsx	 eax, BYTE PTR _to$[ebp]
  00044	50		 push	 eax
  00045	0f be 4d 0c	 movsx	 ecx, BYTE PTR _from$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  0004d	52		 push	 edx
  0004e	68 00 00 00 00	 push	 OFFSET $SG9189
  00053	e8 00 00 00 00	 call	 _printf
  00058	83 c4 10	 add	 esp, 16			; 00000010H

; 10   :         hanoi(n - 1, aux, to, from);

  0005b	0f b6 45 0c	 movzx	 eax, BYTE PTR _from$[ebp]
  0005f	50		 push	 eax
  00060	0f b6 4d 10	 movzx	 ecx, BYTE PTR _to$[ebp]
  00064	51		 push	 ecx
  00065	0f b6 55 14	 movzx	 edx, BYTE PTR _aux$[ebp]
  00069	52		 push	 edx
  0006a	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0006d	83 e8 01	 sub	 eax, 1
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _hanoi
  00076	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@hanoi:

; 11   :     }
; 12   : }

  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_hanoi	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END

